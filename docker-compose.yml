## ملف الدوكر هذا بيجي ك يوتيلز عشان اقدر اسوي منج للكونتينرات حقاتي بشكل احسن
## هي تيجي مع دوكر ولكن مو من ضمن دوكر هي منفصله عنه ، بيكون دوكر اله اصدار ودوكر كومبوز اله اصدار ثاني

## طبعا دوكر كومبوس تبان استخدامه اكثر لما يكون عندي اكثر من كونتينر بكلمو بعض

## مثلا لما كنا نسوي رن للكونتينر عندنا كنا اول شي نسوي بيلد وبيعدها نسوي كونتينر من الاميج الي سويناها
## كنا نكتب اوامر كبيره مع دوكر كومبوز بيختصر كل شي لك 
## الان نبدا كتابته

## نحط هنا اصدار الدكر كومبوز الي بدنا نستخدمه ولكن يجب ان يتناسب مع اصدار الدوكر الي عندك
##   وعشان تشوف تناسب اصدار الدوكر والدكور كمبوس بتلاقي كل شي هنا
version: "3"

## الحين نبدا نعرف السيرفيسيس نقدر نقول انه ايش الكونتينرز الي عندك
services:
##  الحين نبدا نعرف كل السيرفيسيس حقتي او الستيبس
  node-app: ## هيك نحط اسم اله
  ## اللحين نبدا نعرف بعض الحاجات لابلكيشن هذا وهذا الشي هيساعدني ما اكتب دايم الاوامر الكبيره
  ## docker run --name express-node-app-container -v $(pwd)/src:/app/src:ro -d -p 4000:4000 express-node-app الحين نقعد نفكفك الامر هذا
    container_name: express-node-app-container ## اول شي نحدد اسم الكونتينر 
    ##  هنا نحدد من وين ملف الدوكر فايل الي راح يسوي منها اميج ان حطينا نقطه لحاله راح يدور على ملف الدوكر فايل
    build: . ##    ويسوي بيلد منه طبعا بيحط له اسمه لاميج بشكل اوتاميتك ياخذ اسم الفايل الي انت فيه وجنبه اسم السيرفيس
    volumes: ## الحين نكتب الفوليوم الي استخدمناهم وهنا استخدمنا فقط البايند
      - ./src:/app/src:ro ## لانه احنا جوا ملف جوا المشروع $(pwd) بدل  ./src الحين نعمل عمليه البايندج وهنا نقدر نستخدم 
    ports:  ## اللحين اجا دور البورت
      - "4000:4000"
    environment: ## Environment Variables هيك نرسل 
      - PORT=4000
      - NODE_ENV=production 
    ## Environment Variables لو كان عددهم كثير بقدر ارسل الملف كامل حق الانف وفيه كل
    ## env_file:
    ## - ./.env 


    ## Environment Variables بفيديو اليوم هنتعلم كيف اباس متغيرات للكونتينر حقي 
    ## Production ي غير لو هييرن في Development او كيف استخدم دوكر عشان اسوي اداره لبيئات مختلفه للبرنامج حقي لانه لو هييرن في ال التيستنج غير لما هيييرن في 
    ## مثلا هنرسل رقم البورت كمبتغير << تكمله الشرح في صفحة الانديكس


    ## اليوم هنتعلم كيف نسوي اداره الابلكيشن حقي في اكثر من بيئة كيف
    ## الطريقه الي بتفضل الناس تسويها ومكتوبه كمان بالدوكو حق دوكر هي
    ## انه لو بدك تستخدم دوكر او بالاصح الابلكيشن حقك باكثر من بيئة تبدا تنشئ دوكر كومبوز لكل بيئه لوحدها
    ## بالحاله هذي ننشئ دوكر كومبوز لكل واحد فيهم Testing or and staging or and development لو عندنا مثلا 
    ## وراح نسوي لكل واحد ملف دوكر كومبوز Production und Development واح نعتبر اليوم عندنا بيئتين 
    ## اللحين فيه سؤال بخطر في بالك ليه نسوي لكل بيئه ملف عشان كل بيئه عادة عندها اعدادات مختلفه
    ## مثلا بيئه الديف حابب انه تشتغل على بورت مختلف عن بيئة التيست
    ## docker compose -f docker-compose.dev.yml up هيك طريقه لو بدنا نشغل ملف دوكر محدد

    ## ولكن نقطه مهمه عشان ما نكرر يعض النقاط بالملفين الحل انه نسوي ملف دوكر كومبوز عام
    ## ونحط فيه جميع الاشياء المتشابهة وبالملفين نحذ فقط الاشياء الخاصه فيهم
    ## واعتبره هو العام الي بنحط فيه الاساسيات  Docker compose env مثلا اللحين هسوي ملف اسمه 
    ## ليش سميته دوكر كومبوز انف عشان يتلخبط مع الملف الي كاتب فيه الشرح كامل
    ## الحين بكتب كيف نشغل واحد منهم
    ## docker compose -f docker-compose.env.yml -f docker-compose.dev.yml up اول شي نكتب الاساسي الي فيه الاعدادت ،وبعدها الي فيه البيئه
    ##
    ## هنلاحظ انه انه التعديلات الجديده ما بياخذها والسبب انه قطعنا البايندنك بالحاله  Production في بيئه 
    ## هذي البيانات الي فيه من الاميج الاولى الي تسوا لها بيلد 
    ## نقدر نخليه يسوي بيلد لاميج الجديده وهو بشغل الدوكر بالطريقه هذي
    ## docker compose -f docker-compose.env.yml -f docker-compose.dev.yml up --build

    ## وعشان ما ينقل ملفات الدوكر للكونتينر نحطهم بملفات الاجنور وعشان عندنا آكثر من واحد
    ## docker-compose*  بدال ما نكتبهم كلهم نقدر نكتب هيك ومعناها بيسوي اجنور لكل الملفات الي تبدا ب 

    ##  Multi-Stage Dockerfile
    ## الحين بناخد درس جديد وهو تكمله للي فوق انه البيئتين كلهم بياخذو من دوكر فايل واحد 
    ## CMD [ "npm", "run", "start-dev" ] مثلا ما بنحتاج انه نشغل  production وهذا الشي مو كويس لانه ببيئه 
    ## CMD [ "npm", "run", "start" ] نحتاج فقط
    ## هناك عدة حلول لهذي المشكله يا اما نسوي ملف دوكر فايل خاص لكل بيئه او هنشرح طريقه ثانيه اللحين
    ## الحل انه نظيف هذا الكوماند المناسب لكل بيئه ونكتب جوا ملف الكومبوزالخاص لكل بيئه
    ## CMD [ "npm", "run", "start-dev" ] الحين نقدر نحذف السطر هذا من دوكر فايل
    ## اول نقدر نتركه لانه الكوماند الي بملف الدوكر كومبوس لكل بيئه راح يسوي اوفررايت عليه

    ## فيه طريقتين لحله RUN npm install الحين لازم نحل مشكله  
    ## الاولى انه احط شييك يتاكد انا في بيئه الديف او البرودكشن وهيك نسويه
    ## ARG NODE_ENV
    ## RUN if ["$NODE_ENV" = "production"]; \ هذي الشرطه بتخليني اكمل للسطر الي بعده
    ## then npm install --only=production; \
    ## else npm install; \
    ## fi       هيك نقل الكونديشن
    ## وبعدها نرسل نوع البيئه عن طريق ملف الدوكر كومبوز لكل بيئه
    ## build: . ونشيل الامر من ملف الدوكر كومبوز
    ## ونضيف اوامر بيلد جديده خاصه لكل بيئه بملف كل بيئه لحاله
    ## build:
     ## context: .
     ## args:
     ##   - NODE_ENV=development وهنا نرسل الارجومينت الي محتاجينها
     ## اللحين نجرب نشغله بالامر هذا 
     ##docker compose -f docker-compose.env.yml -f docker-compose.dev.yml up -d --build

     ## Multi stage Env اللحين بنشرح طريقه الحل الثانيه هنتسخدم حاجه اسمها 
     ## اول شي نحذف هذا كله الي كتبناه بملف الدوكر فايل
      # ARG NODE_ENV
      # RUN if ["$NODE_ENV" = "production"]; \
      #     then npm install --only=production; \
      #     else npm install; \
      #     fi      
    ## stage معناه اقسم ملف الدوكر فايل لاكثر من  Multi stage Env ايش معنى 
    ## يعني مثلا هيك بيكون شكل ملف الدوكر فايل
    ## as developent or prudction das geht um ENV type هذي مثلي كلها ستيج وبحط لها اسم جنب السطر الاول 
    # FROM node:16 as production
    # WORKDIR /app
    # COPY package.json .
    # RUN npm install --only=production
    # COPY . .
    # EXPOSE 4000
    # CMD [ "npm", "start" ]
    # ونسوي واحد ثاني جوا الملف نفسه للبيئه الثانيه
    # FROM node:16 as development
    # WORKDIR /app
    # COPY package.json .
    # RUN npm install 
    # COPY . .
    # EXPOSE 4000
    # CMD [ "npm", "run", "start-dev" ]